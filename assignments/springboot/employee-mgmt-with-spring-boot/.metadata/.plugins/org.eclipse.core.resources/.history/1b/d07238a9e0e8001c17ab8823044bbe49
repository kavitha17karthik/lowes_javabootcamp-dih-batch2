package com.labs.spring.boot.controller;

import java.net.URI;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.examples.accservice.model.Account;
import com.labs.spring.boot.model.Employee;
import com.labs.spring.boot.model.ResponseMessage;
import com.labs.spring.boot.service.EmployeeService;

@RestController
@RequestMapping(value = "/employee")
public class EmployeeController {
	
	Logger logger = LoggerFactory.getLogger(EmployeeController.class); 
	
	@Autowired
	EmployeeService empService;

	//Create Employee
	@RequestMapping(method = RequestMethod.POST, produces ={MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}, consumes ={MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public ResponseEntity<String> create(@RequestBody Employee emp) throws Exception {
		
		Employee emp = empService.create(emp);		
				
				// Build newly created Account resource URI
				// http://localhost:8080/spring-rest-labs/accounts/{id}
				URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
						.buildAndExpand(employeeCreated.getId()).toUri();
				ResponseMessage response = new ResponseMessage("Success", "Employee Created Successfully");
				//return ResponseEntity.created(location).body(response);
	}

	//SHOW ALL EMPLOYEE DETAILS
	@RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Employee> showAll() throws Exception {
		return service.showAll();
	}

	@RequestMapping(method = RequestMethod.PUT, path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	//@PutMapping(path="/{id}", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public ResponseEntity<String> update(@PathVariable("id") String empId, @RequestBody Employee emp) throws Exception {
		//return service.update(empId, emp);
		int update = service.update(empId, emp);
		return ResponseEntity.ok().body("Employee Information updated successfully");
	}

	@RequestMapping(method = RequestMethod.DELETE, path = "/{id}")
	//@PutMapping("/{id}")
	public ResponseEntity<String> delete(@PathVariable("id") String empId) throws Exception {
		int delStatus = service.delete(empId);
		return ResponseEntity.ok().body("Employee Record is Deleted Successfully");
	}

	@ExceptionHandler({CustomerNotFoundException.class})
	public String handleException() {
		return "bad_request";
	}
	

}
