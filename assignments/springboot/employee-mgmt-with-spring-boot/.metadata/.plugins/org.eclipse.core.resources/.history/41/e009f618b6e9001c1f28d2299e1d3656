package com.labs.spring.boot.advice;

import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;

import com.labs.spring.boot.controller.EmployeeController;
import com.labs.spring.boot.exception.EmployeeNotFoundException;
import com.labs.spring.boot.exception.ResponseMessage;


@ControllerAdvice
public class ExceptionMessageHandler {
	
	Logger expLogger = LoggerFactory.getLogger(EmployeeController.class); 
	
	//EmployeeNotfound exception handler -Update and Get  
	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)//500
	@ExceptionHandler(NoSuchElementException.class)
	
	public Map<String, String> handleEmployeeRelatedException(NoSuchElementException e){
		Map<String,String> errorMap=new HashMap<>();
		errorMap.put("errorMessage:",e.getMessage());
		expLogger.info("EmployeeNotFoundException");		
		return errorMap;
	}
	
	
	//Other General Exception
	@ExceptionHandler(Exception.class)
	public ResponseEntity<?> handleGlobalException(Exception empException, WebRequest request){
		expLogger.info("NoSuchElementException - GlobalExceptionHandler");
		System.out.println(empException.getMessage());		
		ResponseMessage resMsg =new ResponseMessage(empException.getMessage(),request.getDescription(false));
		return new ResponseEntity(resMsg,HttpStatus.INTERNAL_SERVER_ERROR);
		
	}
	//Arguments in the Employee - Validation 
	@ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public Map<String,String> handleInvalidArgument(MethodArgumentNotValidException e)
	{
		Map<String,String> errorMap=new HashMap<>();
		
		e.getBindingResult().getFieldErrors().forEach(error->{
			errorMap.put(error.getField(),error.getDefaultMessage());
		});
		return errorMap;
	}
}
