package com.labs.spring.boot.controller;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.examples.accservice.model.Account;
import com.labs.spring.boot.exception.EmployeeNotFoundException;
import com.labs.spring.boot.exception.ResponseMessage;
import com.labs.spring.boot.model.Employee;
import com.labs.spring.boot.service.EmployeeService;

@RestController
@RequestMapping(value = "/employee")
public class EmployeeController {
	
	Logger logger = LoggerFactory.getLogger(EmployeeController.class); 
	
	@Autowired
	EmployeeService empService;

	// Create Employee
	@PostMapping(consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public ResponseEntity<ResponseMessage> create(@RequestBody Employee employee) throws Exception {
			///logger.info("Entered into post method");
			Employee empCreated =  empService.create(employee);
			URI location = ServletUriComponentsBuilder.fromCurrentRequest().build().toUri(); 
			ResponseMessage response = new ResponseMessage("Success","Employee created successfully");
			//logger.info(response.getMessage(), "response message");
			return ResponseEntity.created(location).body(response);
		}

	//SHOW ALL EMPLOYEE DETAILS
	@RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public  List<Employee> showAll() throws Exception {
		return empService.showAll();
	}

	@RequestMapping(method = RequestMethod.PUT, path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	//@PutMapping(path="/{id}", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public ResponseEntity<String> update(@PathVariable("id") int empId, @RequestBody Employee emp) throws EmployeeNotFoundException {
		Employee updateEmp = empService.update(empId, emp);
	
		if(updateEmp!=null)
		{
			EmployeeNotFoundException response = new EmployeeNotFoundException("Update Failed:"+empId);
			//logger.info(response.getMessage(), "response message");
			return ResponseEntity.();
		}
		else
			return ResponseEntity.ok().body("Employee Information updated successfully");
		
	}

	@RequestMapping(method = RequestMethod.DELETE, path = "/{id}")
	//@PutMapping("/{id}")
	public ResponseEntity<String> delete(@PathVariable("id") int empId) throws EmployeeNotFoundException {
		empService.delete(empId);		
		return ResponseEntity.ok().body("Employee Record is Deleted Successfully");
	}

	/*
	 * @ExceptionHandler({CustomerNotFoundException.class}) public String
	 * handleException() { return "bad_request"; }
	 */
	

}
